openjdk/openjdk.sh
[openjdk] 
[openjdk] == openjdk unit test ==
[openjdk] [INFO] generating benchmarks.jar by maven tool first:
[openjdk] 
[openjdk] [INFO] Test docker hub official image first:
[openjdk] 
# JMH version: 1.21
# VM version: JDK 1.8.0_212, OpenJDK 64-Bit Server VM, 25.212-b04
# VM invoker: /usr/local/openjdk-8/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.MyBenchmark.testMethod

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 2657367352.259 ops/s
# Warmup Iteration   2: 2660343465.678 ops/s
# Warmup Iteration   3: 2657637672.170 ops/s
# Warmup Iteration   4: 2647870975.621 ops/s
# Warmup Iteration   5: 2664423237.171 ops/s
Iteration   1: 2665599428.190 ops/s
Iteration   2: 2667133907.731 ops/s
Iteration   3: 2658808946.614 ops/s
Iteration   4: 2601257192.732 ops/s
Iteration   5: 2656871654.649 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 2661841775.540 ops/s
# Warmup Iteration   2: 2648765756.762 ops/s
# Warmup Iteration   3: 2659648762.737 ops/s
# Warmup Iteration   4: 2658823705.916 ops/s
# Warmup Iteration   5: 2658860544.357 ops/s
Iteration   1: 2658777537.776 ops/s
Iteration   2: 2627059647.496 ops/s
Iteration   3: 2542966831.631 ops/s
Iteration   4: 2662768035.907 ops/s
Iteration   5: 2639198420.084 ops/s

# Run progress: 40.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 2662933931.381 ops/s
# Warmup Iteration   2: 2660262811.244 ops/s
# Warmup Iteration   3: 2659002138.029 ops/s
# Warmup Iteration   4: 2666174075.392 ops/s
# Warmup Iteration   5: 2605887646.357 ops/s
Iteration   1: 2671292585.725 ops/s
Iteration   2: 2662681385.034 ops/s
Iteration   3: 2619835548.616 ops/s
Iteration   4: 2658407470.352 ops/s
Iteration   5: 2664352422.889 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2644216339.864 ops/s
# Warmup Iteration   2: 2659103194.282 ops/s
# Warmup Iteration   3: 2659211486.076 ops/s
# Warmup Iteration   4: 2658949444.515 ops/s
# Warmup Iteration   5: 2662591461.270 ops/s
Iteration   1: 2661131566.690 ops/s
Iteration   2: 2663271149.927 ops/s
Iteration   3: 2662166474.689 ops/s
Iteration   4: 2667072677.333 ops/s
Iteration   5: 2660772043.104 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2662794560.511 ops/s
# Warmup Iteration   2: 2621571733.417 ops/s
# Warmup Iteration   3: 2657146786.383 ops/s
# Warmup Iteration   4: 2657058335.462 ops/s
# Warmup Iteration   5: 2657902108.788 ops/s
Iteration   1: 2661379313.364 ops/s
Iteration   2: 2662635050.641 ops/s
Iteration   3: 2660941754.007 ops/s
Iteration   4: 2616411149.547 ops/s
Iteration   5: 2657501459.078 ops/s


Result "org.sample.MyBenchmark.testMethod":
  2649211746.152 ±(99.9%) 21412650.459 ops/s [Average]
  (min, avg, max) = (2542966831.631, 2649211746.152, 2671292585.725), stdev = 28585275.742
  CI (99.9%): [2627799095.693, 2670624396.612] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt           Score          Error  Units
MyBenchmark.testMethod  thrpt   25  2649211746.152 ± 21412650.459  ops/s
[openjdk] [INFO] Test clear docker image:
[openjdk] 
# JMH version: 1.21
# VM version: JDK 1.8.0-internal, OpenJDK 64-Bit Server VM, 25.71-b00
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.MyBenchmark.testMethod

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 2650745174.937 ops/s
# Warmup Iteration   2: 2657639486.293 ops/s
# Warmup Iteration   3: 2655541937.209 ops/s
# Warmup Iteration   4: 2654984613.369 ops/s
# Warmup Iteration   5: 2655523879.915 ops/s
Iteration   1: 2664494282.805 ops/s
Iteration   2: 2665153899.794 ops/s
Iteration   3: 2658273014.847 ops/s
Iteration   4: 2662611687.363 ops/s
Iteration   5: 2660898617.512 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 2666099894.012 ops/s
# Warmup Iteration   2: 2637541164.559 ops/s
# Warmup Iteration   3: 2572416289.061 ops/s
# Warmup Iteration   4: 2659466012.234 ops/s
# Warmup Iteration   5: 2658956370.403 ops/s
Iteration   1: 2662622349.753 ops/s
Iteration   2: 2668280307.043 ops/s
Iteration   3: 2664468266.858 ops/s
Iteration   4: 2661379626.585 ops/s
Iteration   5: 2659659253.091 ops/s

# Run progress: 40.00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 2660352880.394 ops/s
# Warmup Iteration   2: 2642751951.314 ops/s
# Warmup Iteration   3: 2658353952.256 ops/s
# Warmup Iteration   4: 2634687100.157 ops/s
# Warmup Iteration   5: 2665043056.292 ops/s
Iteration   1: 2660799232.592 ops/s
Iteration   2: 2636336570.642 ops/s
Iteration   3: 2659923510.896 ops/s
Iteration   4: 2653541359.388 ops/s
Iteration   5: 2658091223.928 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2659193677.867 ops/s
# Warmup Iteration   2: 2656880124.982 ops/s
# Warmup Iteration   3: 2619663474.275 ops/s
# Warmup Iteration   4: 2624470552.955 ops/s
# Warmup Iteration   5: 2663776811.108 ops/s
Iteration   1: 2657142728.982 ops/s
Iteration   2: 2657924607.351 ops/s
Iteration   3: 2666656272.940 ops/s
Iteration   4: 2639186362.139 ops/s
Iteration   5: 2664402292.052 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2656795744.006 ops/s
# Warmup Iteration   2: 2661358453.353 ops/s
# Warmup Iteration   3: 2658011993.479 ops/s
# Warmup Iteration   4: 2664488676.864 ops/s
# Warmup Iteration   5: 2663160231.746 ops/s
Iteration   1: 2664674550.491 ops/s
Iteration   2: 2661634334.676 ops/s
Iteration   3: 2658767564.498 ops/s
Iteration   4: 2658519715.143 ops/s
Iteration   5: 2665490852.875 ops/s


Result "org.sample.MyBenchmark.testMethod":
  2659637299.370 ?(99.9%) 5566287.874 ops/s [Average]
  (min, avg, max) = (2636336570.642, 2659637299.370, 2668280307.043), stdev = 7430835.059
  CI (99.9%): [2654071011.496, 2665203587.243] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt           Score         Error  Units
MyBenchmark.testMethod  thrpt   25  2659637299.370 ? 5566287.874  ops/s
