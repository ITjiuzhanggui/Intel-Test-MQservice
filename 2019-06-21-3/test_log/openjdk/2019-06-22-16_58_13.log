openjdk/openjdk.sh
[openjdk] 
[openjdk] == openjdk unit test ==
[openjdk] [INFO] generating benchmarks.jar by maven tool first:
[openjdk] 
[openjdk] [INFO] Test docker hub official image first:
[openjdk] 
# JMH version: 1.21
# VM version: JDK 1.8.0_212, OpenJDK 64-Bit Server VM, 25.212-b04
# VM invoker: /usr/local/openjdk-8/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.MyBenchmark.testMethod

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 2658515528.008 ops/s
# Warmup Iteration   2: 2653804392.427 ops/s
# Warmup Iteration   3: 2657300172.167 ops/s
# Warmup Iteration   4: 2667087455.313 ops/s
# Warmup Iteration   5: 2666868311.275 ops/s
Iteration   1: 2663785940.144 ops/s
Iteration   2: 2665037220.149 ops/s
Iteration   3: 2661129706.041 ops/s
Iteration   4: 2663392480.219 ops/s
Iteration   5: 2619401803.194 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 2656254491.724 ops/s
# Warmup Iteration   2: 2660776052.768 ops/s
# Warmup Iteration   3: 2659495125.461 ops/s
# Warmup Iteration   4: 2662606851.643 ops/s
# Warmup Iteration   5: 2666922729.406 ops/s
Iteration   1: 2664804124.446 ops/s
Iteration   2: 2657790116.244 ops/s
Iteration   3: 2657313927.877 ops/s
Iteration   4: 2666413093.514 ops/s
Iteration   5: 2656995582.372 ops/s

# Run progress: 40.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 2658506089.138 ops/s
# Warmup Iteration   2: 2633536745.263 ops/s
# Warmup Iteration   3: 2599554108.375 ops/s
# Warmup Iteration   4: 2654430116.388 ops/s
# Warmup Iteration   5: 2663896470.242 ops/s
Iteration   1: 2664250421.329 ops/s
Iteration   2: 2664541579.173 ops/s
Iteration   3: 2658966512.827 ops/s
Iteration   4: 2667472986.315 ops/s
Iteration   5: 2667138003.989 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2665561965.558 ops/s
# Warmup Iteration   2: 2666204173.957 ops/s
# Warmup Iteration   3: 2666354383.308 ops/s
# Warmup Iteration   4: 2661588879.730 ops/s
# Warmup Iteration   5: 2658034434.150 ops/s
Iteration   1: 2657229364.094 ops/s
Iteration   2: 2660706604.348 ops/s
Iteration   3: 2661288351.267 ops/s
Iteration   4: 2651074087.642 ops/s
Iteration   5: 2658543904.924 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2659818877.124 ops/s
# Warmup Iteration   2: 2657215734.646 ops/s
# Warmup Iteration   3: 2640026164.330 ops/s
# Warmup Iteration   4: 2657452939.170 ops/s
# Warmup Iteration   5: 2660702823.421 ops/s
Iteration   1: 2660453080.888 ops/s
Iteration   2: 2660263299.698 ops/s
Iteration   3: 2661832782.366 ops/s
Iteration   4: 2663564893.271 ops/s
Iteration   5: 2657924805.170 ops/s


Result "org.sample.MyBenchmark.testMethod":
  2659652586.860 ±(99.9%) 6909310.973 ops/s [Average]
  (min, avg, max) = (2619401803.194, 2659652586.860, 2667472986.315), stdev = 9223732.472
  CI (99.9%): [2652743275.887, 2666561897.833] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt           Score         Error  Units
MyBenchmark.testMethod  thrpt   25  2659652586.860 ± 6909310.973  ops/s
[openjdk] [INFO] Test clear docker image:
[openjdk] 
# JMH version: 1.21
# VM version: JDK 1.8.0-internal, OpenJDK 64-Bit Server VM, 25.71-b00
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.MyBenchmark.testMethod

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 2656052538.918 ops/s
# Warmup Iteration   2: 2665034756.009 ops/s
# Warmup Iteration   3: 2661098844.509 ops/s
# Warmup Iteration   4: 2666302778.460 ops/s
# Warmup Iteration   5: 2665604770.600 ops/s
Iteration   1: 2658906942.185 ops/s
Iteration   2: 2659701901.569 ops/s
Iteration   3: 2654858438.302 ops/s
Iteration   4: 2664107604.354 ops/s
Iteration   5: 2658937993.269 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 2625138900.519 ops/s
# Warmup Iteration   2: 2659429732.861 ops/s
# Warmup Iteration   3: 2659948593.864 ops/s
# Warmup Iteration   4: 2661828340.127 ops/s
# Warmup Iteration   5: 2658190639.609 ops/s
Iteration   1: 2620927562.760 ops/s
Iteration   2: 2639502408.604 ops/s
Iteration   3: 2666595183.737 ops/s
Iteration   4: 2664665074.026 ops/s
Iteration   5: 2662743835.620 ops/s

# Run progress: 40.00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 2657349644.013 ops/s
# Warmup Iteration   2: 2661811407.550 ops/s
# Warmup Iteration   3: 2664082859.876 ops/s
# Warmup Iteration   4: 2645975088.325 ops/s
# Warmup Iteration   5: 2656048798.662 ops/s
Iteration   1: 2655725098.257 ops/s
Iteration   2: 2663789390.583 ops/s
Iteration   3: 2660034361.912 ops/s
Iteration   4: 2663218539.004 ops/s
Iteration   5: 2664474351.115 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2655316287.952 ops/s
# Warmup Iteration   2: 2651745099.547 ops/s
# Warmup Iteration   3: 2664086010.899 ops/s
# Warmup Iteration   4: 2663527737.401 ops/s
# Warmup Iteration   5: 2662493576.168 ops/s
Iteration   1: 2645350923.716 ops/s
Iteration   2: 2660633696.750 ops/s
Iteration   3: 2659914053.019 ops/s
Iteration   4: 2663018036.602 ops/s
Iteration   5: 2638281061.510 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2654398237.656 ops/s
# Warmup Iteration   2: 2658859651.433 ops/s
# Warmup Iteration   3: 2661363708.672 ops/s
# Warmup Iteration   4: 2635031120.079 ops/s
# Warmup Iteration   5: 2661636979.580 ops/s
Iteration   1: 2657536668.977 ops/s
Iteration   2: 2663649753.807 ops/s
Iteration   3: 2661519895.946 ops/s
Iteration   4: 2665859004.497 ops/s
Iteration   5: 2663114663.025 ops/s


Result "org.sample.MyBenchmark.testMethod":
  2657482657.726 ?(99.9%) 7991338.759 ops/s [Average]
  (min, avg, max) = (2620927562.760, 2657482657.726, 2666595183.737), stdev = 10668208.610
  CI (99.9%): [2649491318.967, 2665473996.485] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt           Score         Error  Units
MyBenchmark.testMethod  thrpt   25  2657482657.726 ? 7991338.759  ops/s
