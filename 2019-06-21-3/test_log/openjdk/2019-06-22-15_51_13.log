openjdk/openjdk.sh
[openjdk] 
[openjdk] == openjdk unit test ==
[openjdk] [INFO] generating benchmarks.jar by maven tool first:
[openjdk] 
[openjdk] [INFO] Test docker hub official image first:
[openjdk] 
# JMH version: 1.21
# VM version: JDK 1.8.0_212, OpenJDK 64-Bit Server VM, 25.212-b04
# VM invoker: /usr/local/openjdk-8/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.MyBenchmark.testMethod

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 2660005254.890 ops/s
# Warmup Iteration   2: 2658473267.504 ops/s
# Warmup Iteration   3: 2660519003.602 ops/s
# Warmup Iteration   4: 2658860977.406 ops/s
# Warmup Iteration   5: 2652865764.440 ops/s
Iteration   1: 2656985810.743 ops/s
Iteration   2: 2661037298.703 ops/s
Iteration   3: 2656633831.869 ops/s
Iteration   4: 2663514021.126 ops/s
Iteration   5: 2665520878.374 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 2660820628.990 ops/s
# Warmup Iteration   2: 2664090323.493 ops/s
# Warmup Iteration   3: 2604680982.533 ops/s
# Warmup Iteration   4: 2656934744.159 ops/s
# Warmup Iteration   5: 2665650583.397 ops/s
Iteration   1: 2532598508.332 ops/s
Iteration   2: 2656537662.649 ops/s
Iteration   3: 2664985211.497 ops/s
Iteration   4: 2659813023.915 ops/s
Iteration   5: 2661853910.181 ops/s

# Run progress: 40.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 2661199155.503 ops/s
# Warmup Iteration   2: 2658607240.623 ops/s
# Warmup Iteration   3: 2667837898.993 ops/s
# Warmup Iteration   4: 2654700481.870 ops/s
# Warmup Iteration   5: 2663235747.263 ops/s
Iteration   1: 2658510917.324 ops/s
Iteration   2: 2645474054.339 ops/s
Iteration   3: 2581110618.824 ops/s
Iteration   4: 2665137910.688 ops/s
Iteration   5: 2564522226.770 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2660822803.708 ops/s
# Warmup Iteration   2: 2657294336.828 ops/s
# Warmup Iteration   3: 2662779978.947 ops/s
# Warmup Iteration   4: 2662450882.729 ops/s
# Warmup Iteration   5: 2663503537.948 ops/s
Iteration   1: 2656134289.986 ops/s
Iteration   2: 2652897620.337 ops/s
Iteration   3: 2661176778.381 ops/s
Iteration   4: 2657859578.779 ops/s
Iteration   5: 2667136035.161 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2533687011.412 ops/s
# Warmup Iteration   2: 2665909484.706 ops/s
# Warmup Iteration   3: 2630956823.181 ops/s
# Warmup Iteration   4: 2660075521.807 ops/s
# Warmup Iteration   5: 2660847102.690 ops/s
Iteration   1: 2662593526.570 ops/s
Iteration   2: 2665229914.214 ops/s
Iteration   3: 2660017749.088 ops/s
Iteration   4: 2661178144.986 ops/s
Iteration   5: 2659656346.383 ops/s


Result "org.sample.MyBenchmark.testMethod":
  2647924634.769 ±(99.9%) 25780493.867 ops/s [Average]
  (min, avg, max) = (2532598508.332, 2647924634.769, 2667136035.161), stdev = 34416221.726
  CI (99.9%): [2622144140.902, 2673705128.635] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt           Score          Error  Units
MyBenchmark.testMethod  thrpt   25  2647924634.769 ± 25780493.867  ops/s
offi-openjdk
[openjdk] [INFO] Test clear docker image:
[openjdk] 
# JMH version: 1.21
# VM version: JDK 1.8.0-internal, OpenJDK 64-Bit Server VM, 25.71-b00
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.MyBenchmark.testMethod

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 2633495270.761 ops/s
# Warmup Iteration   2: 2663581214.297 ops/s
# Warmup Iteration   3: 2656864140.039 ops/s
# Warmup Iteration   4: 2620854950.892 ops/s
# Warmup Iteration   5: 2656424400.902 ops/s
Iteration   1: 2667304681.787 ops/s
Iteration   2: 2667548844.582 ops/s
Iteration   3: 2638522866.416 ops/s
Iteration   4: 2661509920.080 ops/s
Iteration   5: 2662608551.321 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 2631095758.026 ops/s
# Warmup Iteration   2: 2656992868.408 ops/s
# Warmup Iteration   3: 2663417727.807 ops/s
# Warmup Iteration   4: 2665857647.293 ops/s
# Warmup Iteration   5: 2662270363.412 ops/s
Iteration   1: 2655521915.433 ops/s
Iteration   2: 2661505299.976 ops/s
Iteration   3: 2664092379.805 ops/s
Iteration   4: 2664705928.190 ops/s
Iteration   5: 2661860316.709 ops/s

# Run progress: 40.00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 2662311706.310 ops/s
# Warmup Iteration   2: 2600574158.255 ops/s
# Warmup Iteration   3: 2659977228.408 ops/s
# Warmup Iteration   4: 2661963598.848 ops/s
# Warmup Iteration   5: 2663015030.606 ops/s
Iteration   1: 2665197593.070 ops/s
Iteration   2: 2660632086.287 ops/s
Iteration   3: 2660976611.063 ops/s
Iteration   4: 2469163756.891 ops/s
Iteration   5: 2659473063.888 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2663212464.634 ops/s
# Warmup Iteration   2: 2661696684.671 ops/s
# Warmup Iteration   3: 2664642492.204 ops/s
# Warmup Iteration   4: 2661125644.558 ops/s
# Warmup Iteration   5: 2658843527.414 ops/s
Iteration   1: 2662551609.292 ops/s
Iteration   2: 2661175023.344 ops/s
Iteration   3: 2663930539.897 ops/s
Iteration   4: 2661711316.311 ops/s
Iteration   5: 2609465596.234 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2659331319.646 ops/s
# Warmup Iteration   2: 2656933763.798 ops/s
# Warmup Iteration   3: 2660736360.055 ops/s
# Warmup Iteration   4: 2663863550.654 ops/s
# Warmup Iteration   5: 2656020823.996 ops/s
Iteration   1: 2659747229.868 ops/s
Iteration   2: 2665008568.392 ops/s
Iteration   3: 2630871676.607 ops/s
Iteration   4: 2653064419.500 ops/s
Iteration   5: 2660589203.855 ops/s


Result "org.sample.MyBenchmark.testMethod":
  2649949559.952 ?(99.9%) 29833871.464 ops/s [Average]
  (min, avg, max) = (2469163756.891, 2649949559.952, 2667548844.582), stdev = 39827364.850
  CI (99.9%): [2620115688.488, 2679783431.416] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt           Score          Error  Units
MyBenchmark.testMethod  thrpt   25  2649949559.952 ? 29833871.464  ops/s
clr-openjdk
